#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <System.Data.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50630.0.
// 
namespace MaintAuthorsDGV {
    using namespace System;
    
    using namespace System;
    ref class AuthorsDS;
    
    
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"AuthorsDS"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet"), 
    System::CLSCompliantAttribute(false)]
    public ref class AuthorsDS : public System::Data::DataSet {
        public : ref class AuthorsDataTable;
        public : ref class AuthorsRow;
        public : ref class AuthorsRowChangeEvent;
        
        private: MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  tableAuthors;
        
        private: System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void AuthorsRowChangeEventHandler(System::Object^  sender, MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AuthorsDS();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AuthorsDS(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(System::ComponentModel::DesignerSerializationVisibility::Content)]
         property MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  Authors {
            MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual  property System::Data::SchemaSerializationMode SchemaSerializationMode {
            System::Data::SchemaSerializationMode get() override;
            System::Void set(System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
         property System::Data::DataTableCollection^  Tables {
            System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
         property System::Data::DataRelationCollection^  Relations {
            System::Data::DataRelationCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DefaultValueAttribute(true)]
         property System::Boolean EnforceConstraints {
            System::Boolean get() new;
            System::Void set(System::Boolean value) new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void ReadXmlSerializable(System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars(System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Boolean ShouldSerializeAuthors();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class AuthorsDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn^  columnAuthorID;
            
            private: System::Data::DataColumn^  columnLastName;
            
            private: System::Data::DataColumn^  columnFirstName;
            
            public: event MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEventHandler^  AuthorsRowChanging;
            
            public: event MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEventHandler^  AuthorsRowChanged;
            
            public: event MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEventHandler^  AuthorsRowDeleting;
            
            public: event MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEventHandler^  AuthorsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AuthorsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AuthorsDataTable(System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AuthorsDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  AuthorIDColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  LastNameColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  FirstNameColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
             property System::Int32 Count {
                System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property MaintAuthorsDGV::AuthorsDS::AuthorsRow^  default [System::Int32 ] {
                MaintAuthorsDGV::AuthorsDS::AuthorsRow^  get(System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void AddAuthorsRow(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AddAuthorsRow(System::String^  LastName, System::String^  FirstName);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MaintAuthorsDGV::AuthorsDS::AuthorsRow^  FindByAuthorID(System::Int32 AuthorID);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MaintAuthorsDGV::AuthorsDS::AuthorsRow^  NewAuthorsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataRow^  NewRowFromBuilder(System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void RemoveAuthorsRow(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class AuthorsRow : public System::Data::DataRow {
            
            private: MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  tableAuthors;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AuthorsRow(System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Int32 AuthorID {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  LastName {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  FirstName {
                System::String^  get();
                System::Void set(System::String^  value);
            }
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class AuthorsRowChangeEvent : public System::EventArgs {
            
            private: MaintAuthorsDGV::AuthorsDS::AuthorsRow^  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            AuthorsRowChangeEvent(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row, System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property MaintAuthorsDGV::AuthorsDS::AuthorsRow^  Row {
                MaintAuthorsDGV::AuthorsDS::AuthorsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataRowAction Action {
                System::Data::DataRowAction get();
            }
        };
    };
}
namespace MaintAuthorsDGV {
    
    
    inline AuthorsDS::AuthorsDS() {
        this->BeginInit();
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &MaintAuthorsDGV::AuthorsDS::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline AuthorsDS::AuthorsDS(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataSet(info, context) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &MaintAuthorsDGV::AuthorsDS::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        System::String^  strSchema = (cli::safe_cast<System::String^  >(info->GetValue(L"XmlSchema", System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == System::Data::SchemaSerializationMode::IncludeSchema) {
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->EnforceConstraints = false;
            ds->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Authors"] != nullptr) {
                __super::Tables->Add((gcnew MaintAuthorsDGV::AuthorsDS::AuthorsDataTable(ds->Tables[L"Authors"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &MaintAuthorsDGV::AuthorsDS::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  AuthorsDS::Authors::get() {
        return this->tableAuthors;
    }
    
    inline System::Data::SchemaSerializationMode AuthorsDS::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void AuthorsDS::SchemaSerializationMode::set(System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline System::Data::DataTableCollection^  AuthorsDS::Tables::get() {
        return __super::Tables;
    }
    
    inline System::Data::DataRelationCollection^  AuthorsDS::Relations::get() {
        return __super::Relations;
    }
    
    inline System::Boolean AuthorsDS::EnforceConstraints::get() {
        return __super::EnforceConstraints;
    }
    inline System::Void AuthorsDS::EnforceConstraints::set(System::Boolean value) {
        __super::EnforceConstraints = __identifier(value);
    }
    
    inline System::Void AuthorsDS::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline System::Data::DataSet^  AuthorsDS::Clone() {
        MaintAuthorsDGV::AuthorsDS^  cln = (cli::safe_cast<MaintAuthorsDGV::AuthorsDS^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Boolean AuthorsDS::ShouldSerializeTables() {
        return false;
    }
    
    inline System::Boolean AuthorsDS::ShouldSerializeRelations() {
        return false;
    }
    
    inline System::Void AuthorsDS::ReadXmlSerializable(System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Authors"] != nullptr) {
                __super::Tables->Add((gcnew MaintAuthorsDGV::AuthorsDS::AuthorsDataTable(ds->Tables[L"Authors"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchema^  AuthorsDS::GetSchemaSerializable() {
        System::IO::MemoryStream^  stream = (gcnew System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read((gcnew System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline System::Void AuthorsDS::InitVars() {
        this->InitVars(true);
    }
    
    inline System::Void AuthorsDS::InitVars(System::Boolean initTable) {
        this->tableAuthors = (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  >(__super::Tables[L"Authors"]));
        if (initTable == true) {
            if (this->tableAuthors != nullptr) {
                this->tableAuthors->InitVars();
            }
        }
    }
    
    inline System::Void AuthorsDS::InitClass() {
        this->DataSetName = L"AuthorsDS";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/AuthorsDS.xsd";
        this->EnforceConstraints = true;
        this->tableAuthors = (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsDataTable());
        __super::Tables->Add(this->tableAuthors);
    }
    
    inline System::Boolean AuthorsDS::ShouldSerializeAuthors() {
        return false;
    }
    
    inline System::Void AuthorsDS::SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  AuthorsDS::GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        MaintAuthorsDGV::AuthorsDS^  ds = (gcnew MaintAuthorsDGV::AuthorsDS());
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any = (gcnew System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        return type;
    }
    
    
    inline AuthorsDS::AuthorsDataTable::AuthorsDataTable() {
        this->TableName = L"Authors";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline AuthorsDS::AuthorsDataTable::AuthorsDataTable(System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline AuthorsDS::AuthorsDataTable::AuthorsDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline System::Data::DataColumn^  AuthorsDS::AuthorsDataTable::AuthorIDColumn::get() {
        return this->columnAuthorID;
    }
    
    inline System::Data::DataColumn^  AuthorsDS::AuthorsDataTable::LastNameColumn::get() {
        return this->columnLastName;
    }
    
    inline System::Data::DataColumn^  AuthorsDS::AuthorsDataTable::FirstNameColumn::get() {
        return this->columnFirstName;
    }
    
    inline System::Int32 AuthorsDS::AuthorsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AuthorsDS::AuthorsDataTable::default::get(System::Int32 index) {
        return (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(this->Rows[index]));
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::AddAuthorsRow(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AuthorsDS::AuthorsDataTable::AddAuthorsRow(System::String^  LastName, 
                System::String^  FirstName) {
        MaintAuthorsDGV::AuthorsDS::AuthorsRow^  rowAuthorsRow = (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(this->NewRow()));
        rowAuthorsRow->ItemArray = gcnew cli::array< System::Object^  >(3) {nullptr, LastName, FirstName};
        this->Rows->Add(rowAuthorsRow);
        return rowAuthorsRow;
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AuthorsDS::AuthorsDataTable::FindByAuthorID(System::Int32 AuthorID) {
        return (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {AuthorID})));
    }
    
    inline System::Collections::IEnumerator^  AuthorsDS::AuthorsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline System::Data::DataTable^  AuthorsDS::AuthorsDataTable::Clone() {
        MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  cln = (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Data::DataTable^  AuthorsDS::AuthorsDataTable::CreateInstance() {
        return (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsDataTable());
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::InitVars() {
        this->columnAuthorID = __super::Columns[L"AuthorID"];
        this->columnLastName = __super::Columns[L"LastName"];
        this->columnFirstName = __super::Columns[L"FirstName"];
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::InitClass() {
        this->columnAuthorID = (gcnew System::Data::DataColumn(L"AuthorID", System::Int32::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnAuthorID);
        this->columnLastName = (gcnew System::Data::DataColumn(L"LastName", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnLastName);
        this->columnFirstName = (gcnew System::Data::DataColumn(L"FirstName", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFirstName);
        this->Constraints->Add((gcnew System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< System::Data::DataColumn^  >(1) {this->columnAuthorID}, 
                true)));
        this->columnAuthorID->AutoIncrement = true;
        this->columnAuthorID->AutoIncrementSeed = -1;
        this->columnAuthorID->AutoIncrementStep = -1;
        this->columnAuthorID->AllowDBNull = false;
        this->columnAuthorID->ReadOnly = true;
        this->columnAuthorID->Unique = true;
        this->columnLastName->AllowDBNull = false;
        this->columnLastName->MaxLength = 50;
        this->columnFirstName->AllowDBNull = false;
        this->columnFirstName->MaxLength = 50;
        this->Locale = (gcnew System::Globalization::CultureInfo(L"en-US"));
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AuthorsDS::AuthorsDataTable::NewAuthorsRow() {
        return (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(this->NewRow()));
    }
    
    inline System::Data::DataRow^  AuthorsDS::AuthorsDataTable::NewRowFromBuilder(System::Data::DataRowBuilder^  builder) {
        return (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsRow(builder));
    }
    
    inline System::Type^  AuthorsDS::AuthorsDataTable::GetRowType() {
        return MaintAuthorsDGV::AuthorsDS::AuthorsRow::typeid;
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->AuthorsRowChanged(this, (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEvent((cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->AuthorsRowChanging(this, (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEvent((cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->AuthorsRowDeleted(this, (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEvent((cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->AuthorsRowDeleting(this, (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsRowChangeEvent((cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void AuthorsDS::AuthorsDataTable::RemoveAuthorsRow(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  AuthorsDS::AuthorsDataTable::GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        MaintAuthorsDGV::AuthorsDS^  ds = (gcnew MaintAuthorsDGV::AuthorsDS());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = System::Decimal(0);
        any1->MaxOccurs = System::Decimal::MaxValue;
        any1->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = System::Decimal(1);
        any2->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"AuthorsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        return type;
    }
    
    
    inline AuthorsDS::AuthorsRow::AuthorsRow(System::Data::DataRowBuilder^  rb) : 
            System::Data::DataRow(rb) {
        this->tableAuthors = (cli::safe_cast<MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  >(this->Table));
    }
    
    inline System::Int32 AuthorsDS::AuthorsRow::AuthorID::get() {
        return (*cli::safe_cast<System::Int32^>(this[this->tableAuthors->AuthorIDColumn]));
    }
    inline System::Void AuthorsDS::AuthorsRow::AuthorID::set(System::Int32 value) {
        this[this->tableAuthors->AuthorIDColumn] = value;
    }
    
    inline System::String^  AuthorsDS::AuthorsRow::LastName::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableAuthors->LastNameColumn]));
    }
    inline System::Void AuthorsDS::AuthorsRow::LastName::set(System::String^  value) {
        this[this->tableAuthors->LastNameColumn] = value;
    }
    
    inline System::String^  AuthorsDS::AuthorsRow::FirstName::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableAuthors->FirstNameColumn]));
    }
    inline System::Void AuthorsDS::AuthorsRow::FirstName::set(System::String^  value) {
        this[this->tableAuthors->FirstNameColumn] = value;
    }
    
    
    inline AuthorsDS::AuthorsRowChangeEvent::AuthorsRowChangeEvent(MaintAuthorsDGV::AuthorsDS::AuthorsRow^  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsRow^  AuthorsDS::AuthorsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction AuthorsDS::AuthorsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
namespace MaintAuthorsDGV {
    namespace AuthorsDSTableAdapters {
    
    using namespace System;
    ref class AuthorsTableAdapter;
    
    
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::ComponentModel::DataObjectAttribute(true), 
    System::ComponentModel::DesignerAttribute(L"Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" 
L", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter"), 
    System::CLSCompliantAttribute(false)]
    public ref class AuthorsTableAdapter : public System::ComponentModel::Component {
        
        private: System::Data::SqlClient::SqlDataAdapter^  _adapter;
        
        private: System::Data::SqlClient::SqlConnection^  _connection;
        
        private: cli::array< System::Data::SqlClient::SqlCommand^  >^  _commandCollection;
        
        private: System::Boolean _clearBeforeFill;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AuthorsTableAdapter();
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
         property System::Data::SqlClient::SqlDataAdapter^  Adapter {
            System::Data::SqlClient::SqlDataAdapter^  get();
        }
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
         property System::Data::SqlClient::SqlConnection^  Connection {
            System::Data::SqlClient::SqlConnection^  get();
            System::Void set(System::Data::SqlClient::SqlConnection^  value);
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
         property cli::array< System::Data::SqlClient::SqlCommand^  >^  CommandCollection {
            cli::array< System::Data::SqlClient::SqlCommand^  >^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
         property System::Boolean ClearBeforeFill {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitAdapter();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitConnection();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitCommandCollection();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Fill, true)]
        virtual System::Int32 Fill(MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Select, true)]
        virtual MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  GetData();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(MaintAuthorsDGV::AuthorsDS^  dataSet);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(System::Data::DataRow^  dataRow);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(cli::array< System::Data::DataRow^  >^  dataRows);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Delete, true)]
        virtual System::Int32 Delete(System::Int32 Original_AuthorID, System::String^  Original_LastName, System::String^  Original_FirstName);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Insert, true)]
        virtual System::Int32 Insert(System::String^  LastName, System::String^  FirstName);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(System::ComponentModel::DataObjectMethodType::Update, true)]
        virtual System::Int32 Update(
                    System::String^  LastName, 
                    System::String^  FirstName, 
                    System::Int32 Original_AuthorID, 
                    System::String^  Original_LastName, 
                    System::String^  Original_FirstName, 
                    System::Int32 AuthorID);
    };
    }
}
namespace MaintAuthorsDGV {
    namespace AuthorsDSTableAdapters {
    
    
    inline AuthorsTableAdapter::AuthorsTableAdapter() {
        this->ClearBeforeFill = true;
    }
    
    inline System::Data::SqlClient::SqlDataAdapter^  AuthorsTableAdapter::Adapter::get() {
        if (this->_adapter == nullptr) {
            this->InitAdapter();
        }
        return this->_adapter;
    }
    
    inline System::Data::SqlClient::SqlConnection^  AuthorsTableAdapter::Connection::get() {
        if (this->_connection == nullptr) {
            this->InitConnection();
        }
        return this->_connection;
    }
    inline System::Void AuthorsTableAdapter::Connection::set(System::Data::SqlClient::SqlConnection^  value) {
        this->_connection = __identifier(value);
        if (this->Adapter->InsertCommand != nullptr) {
            this->Adapter->InsertCommand->Connection = __identifier(value);
        }
        if (this->Adapter->DeleteCommand != nullptr) {
            this->Adapter->DeleteCommand->Connection = __identifier(value);
        }
        if (this->Adapter->UpdateCommand != nullptr) {
            this->Adapter->UpdateCommand->Connection = __identifier(value);
        }
        for (        System::Int32 i = 0; (i < this->CommandCollection->Length);         i = (i + 1)) {
            if (this->CommandCollection[i] != nullptr) {
                (cli::safe_cast<System::Data::SqlClient::SqlCommand^  >(this->CommandCollection[i]))->Connection = __identifier(value);
            }
        }
    }
    
    inline cli::array< System::Data::SqlClient::SqlCommand^  >^  AuthorsTableAdapter::CommandCollection::get() {
        if (this->_commandCollection == nullptr) {
            this->InitCommandCollection();
        }
        return this->_commandCollection;
    }
    
    inline System::Boolean AuthorsTableAdapter::ClearBeforeFill::get() {
        return this->_clearBeforeFill;
    }
    inline System::Void AuthorsTableAdapter::ClearBeforeFill::set(System::Boolean value) {
        this->_clearBeforeFill = __identifier(value);
    }
    
    inline System::Void AuthorsTableAdapter::InitAdapter() {
        this->_adapter = (gcnew System::Data::SqlClient::SqlDataAdapter());
        System::Data::Common::DataTableMapping^  tableMapping = (gcnew System::Data::Common::DataTableMapping());
        tableMapping->SourceTable = L"Table";
        tableMapping->DataSetTable = L"Authors";
        tableMapping->ColumnMappings->Add(L"AuthorID", L"AuthorID");
        tableMapping->ColumnMappings->Add(L"LastName", L"LastName");
        tableMapping->ColumnMappings->Add(L"FirstName", L"FirstName");
        this->_adapter->TableMappings->Add(tableMapping);
        this->_adapter->DeleteCommand = (gcnew System::Data::SqlClient::SqlCommand());
        this->_adapter->DeleteCommand->Connection = this->Connection;
        this->_adapter->DeleteCommand->CommandText = L"DELETE FROM [dbo].[Authors] WHERE (([AuthorID] = @Original_AuthorID) AND ([LastNa" 
L"me] = @Original_LastName) AND ([FirstName] = @Original_FirstName))";
        this->_adapter->DeleteCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_AuthorID", System::Data::SqlDbType::Int, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"AuthorID", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_LastName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"LastName", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_FirstName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"FirstName", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->InsertCommand = (gcnew System::Data::SqlClient::SqlCommand());
        this->_adapter->InsertCommand->Connection = this->Connection;
        this->_adapter->InsertCommand->CommandText = L"INSERT INTO [dbo].[Authors] ([LastName], [FirstName]) VALUES (@LastName, @FirstNa" 
L"me);\r\nSELECT AuthorID, LastName, FirstName FROM Authors WHERE (AuthorID = SCOPE_" 
L"IDENTITY())";
        this->_adapter->InsertCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@LastName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"LastName", System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->InsertCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@FirstName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"FirstName", System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand = (gcnew System::Data::SqlClient::SqlCommand());
        this->_adapter->UpdateCommand->Connection = this->Connection;
        this->_adapter->UpdateCommand->CommandText = L"UPDATE [dbo].[Authors] SET [LastName] = @LastName, [FirstName] = @FirstName WHERE" 
L" (([AuthorID] = @Original_AuthorID) AND ([LastName] = @Original_LastName) AND ([" 
L"FirstName] = @Original_FirstName));\r\nSELECT AuthorID, LastName, FirstName FROM A" 
L"uthors WHERE (AuthorID = @AuthorID)";
        this->_adapter->UpdateCommand->CommandType = System::Data::CommandType::Text;
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@LastName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"LastName", System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@FirstName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"FirstName", System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_AuthorID", System::Data::SqlDbType::Int, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"AuthorID", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_LastName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"LastName", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@Original_FirstName", System::Data::SqlDbType::VarChar, 
                0, System::Data::ParameterDirection::Input, 0, 0, L"FirstName", System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew System::Data::SqlClient::SqlParameter(L"@AuthorID", System::Data::SqlDbType::Int, 
                4, System::Data::ParameterDirection::Input, 0, 0, L"AuthorID", System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
    }
    
    inline System::Void AuthorsTableAdapter::InitConnection() {
        this->_connection = (gcnew System::Data::SqlClient::SqlConnection());
        this->_connection->ConnectionString = L"Data Source=AMIDALA;Initial Catalog=DCV_DB;Integrated Security=True;Pooling=False" 
L"";
    }
    
    inline System::Void AuthorsTableAdapter::InitCommandCollection() {
        this->_commandCollection = gcnew cli::array< System::Data::SqlClient::SqlCommand^  >(1);
        this->_commandCollection[0] = (gcnew System::Data::SqlClient::SqlCommand());
        this->_commandCollection[0]->Connection = this->Connection;
        this->_commandCollection[0]->CommandText = L"SELECT AuthorID, LastName, FirstName FROM dbo.Authors";
        this->_commandCollection[0]->CommandType = System::Data::CommandType::Text;
    }
    
    inline System::Int32 AuthorsTableAdapter::Fill(MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  dataTable) {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  AuthorsTableAdapter::GetData() {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  dataTable = (gcnew MaintAuthorsDGV::AuthorsDS::AuthorsDataTable());
        this->Adapter->Fill(dataTable);
        return dataTable;
    }
    
    inline System::Int32 AuthorsTableAdapter::Update(MaintAuthorsDGV::AuthorsDS::AuthorsDataTable^  dataTable) {
        return this->Adapter->Update(dataTable);
    }
    
    inline System::Int32 AuthorsTableAdapter::Update(MaintAuthorsDGV::AuthorsDS^  dataSet) {
        return this->Adapter->Update(dataSet, L"Authors");
    }
    
    inline System::Int32 AuthorsTableAdapter::Update(System::Data::DataRow^  dataRow) {
        return this->Adapter->Update(gcnew cli::array< System::Data::DataRow^  >(1) {dataRow});
    }
    
    inline System::Int32 AuthorsTableAdapter::Update(cli::array< System::Data::DataRow^  >^  dataRows) {
        return this->Adapter->Update(dataRows);
    }
    
    inline System::Int32 AuthorsTableAdapter::Delete(System::Int32 Original_AuthorID, System::String^  Original_LastName, 
                System::String^  Original_FirstName) {
        this->Adapter->DeleteCommand->Parameters[0]->Value = static_cast<System::Int32>(Original_AuthorID);
        if (Original_LastName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Original_LastName"));
        }
        else {
            this->Adapter->DeleteCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(Original_LastName));
        }
        if (Original_FirstName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Original_FirstName"));
        }
        else {
            this->Adapter->DeleteCommand->Parameters[2]->Value = (cli::safe_cast<System::String^  >(Original_FirstName));
        }
        System::Data::ConnectionState previousConnectionState = this->Adapter->DeleteCommand->Connection->State;
        this->Adapter->DeleteCommand->Connection->Open();
        try {
            System::Int32 returnValue = this->Adapter->DeleteCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->DeleteCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 AuthorsTableAdapter::Insert(System::String^  LastName, System::String^  FirstName) {
        if (LastName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"LastName"));
        }
        else {
            this->Adapter->InsertCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(LastName));
        }
        if (FirstName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"FirstName"));
        }
        else {
            this->Adapter->InsertCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(FirstName));
        }
        System::Data::ConnectionState previousConnectionState = this->Adapter->InsertCommand->Connection->State;
        this->Adapter->InsertCommand->Connection->Open();
        try {
            System::Int32 returnValue = this->Adapter->InsertCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->InsertCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 AuthorsTableAdapter::Update(
                System::String^  LastName, 
                System::String^  FirstName, 
                System::Int32 Original_AuthorID, 
                System::String^  Original_LastName, 
                System::String^  Original_FirstName, 
                System::Int32 AuthorID) {
        if (LastName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"LastName"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(LastName));
        }
        if (FirstName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"FirstName"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(FirstName));
        }
        this->Adapter->UpdateCommand->Parameters[2]->Value = static_cast<System::Int32>(Original_AuthorID);
        if (Original_LastName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Original_LastName"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[3]->Value = (cli::safe_cast<System::String^  >(Original_LastName));
        }
        if (Original_FirstName == nullptr) {
            throw (gcnew System::ArgumentNullException(L"Original_FirstName"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[4]->Value = (cli::safe_cast<System::String^  >(Original_FirstName));
        }
        this->Adapter->UpdateCommand->Parameters[5]->Value = static_cast<System::Int32>(AuthorID);
        System::Data::ConnectionState previousConnectionState = this->Adapter->UpdateCommand->Connection->State;
        this->Adapter->UpdateCommand->Connection->Open();
        try {
            System::Int32 returnValue = this->Adapter->UpdateCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == System::Data::ConnectionState::Closed) {
                this->Adapter->UpdateCommand->Connection->Close();
            }
        }
    }
    }
}
