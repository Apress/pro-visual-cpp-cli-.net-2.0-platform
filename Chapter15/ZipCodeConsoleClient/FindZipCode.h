#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Xml.dll>
#using <System.Web.Services.dll>
#using <System.EnterpriseServices.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by wsdl, Version=2.0.50630.0.
// 
namespace FindZipCode {
    using namespace System::Diagnostics;
    using namespace System::Web::Services;
    using namespace System::ComponentModel;
    using namespace System::Web::Services::Protocols;
    using namespace System;
    using namespace System::Xml::Serialization;
    
    using namespace System;
    ref class FindZipCodeClass;
    ref class GetZipCompletedEventArgs;
    
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50630.0")]
    public delegate System::Void GetZipCompletedEventHandler(System::Object^  sender, FindZipCode::GetZipCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50630.0"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::Web::Services::WebServiceBindingAttribute(Name=L"FindZipCodeClassSoap", Namespace=L"http://managedcpp.net")]
    public ref class FindZipCodeClass : public System::Web::Services::Protocols::SoapHttpClientProtocol {
        
        private: System::Threading::SendOrPostCallback^  GetZipOperationCompleted;
        
        /// <remarks/>
        public: event FindZipCode::GetZipCompletedEventHandler^  GetZipCompleted;
        
        /// <remarks/>
        public: FindZipCodeClass();
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"http://managedcpp.net/GetZip", RequestNamespace=L"http://managedcpp.net", 
            ResponseNamespace=L"http://managedcpp.net", Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Int32 GetZip(System::String^  city, System::String^  state);
        
        /// <remarks/>
        public: System::IAsyncResult^  BeginGetZip(System::String^  city, System::String^  state, System::AsyncCallback^  callback, 
                    System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Int32 EndGetZip(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void GetZipAsync(System::String^  city, System::String^  state);
        
        /// <remarks/>
        public: System::Void GetZipAsync(System::String^  city, System::String^  state, System::Object^  userState);
        
        private: System::Void OnGetZipOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: System::Void CancelAsync(System::Object^  userState) new;
    };
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50630.0"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code")]
    public ref class GetZipCompletedEventArgs : public System::ComponentModel::AsyncCompletedEventArgs {
        
        private: cli::array< System::Object^  >^  results;
        
        internal: GetZipCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, System::Boolean cancelled, 
                    System::Object^  userState);
        /// <remarks/>
        public:  property System::Int32 Result {
            System::Int32 get();
        }
    };
}
namespace FindZipCode {
    
    
    inline FindZipCodeClass::FindZipCodeClass() {
        this->Url = L"http://localhost/FindZipCode/FindZipCode.asmx";
    }
    
    inline System::Int32 FindZipCodeClass::GetZip(System::String^  city, System::String^  state) {
        cli::array< System::Object^  >^  results = this->Invoke(L"GetZip", gcnew cli::array< System::Object^  >(2) {city, 
                state});
        return (*cli::safe_cast<System::Int32^>(results[0]));
    }
    
    inline System::IAsyncResult^  FindZipCodeClass::BeginGetZip(System::String^  city, System::String^  state, System::AsyncCallback^  callback, 
                System::Object^  asyncState) {
        return this->BeginInvoke(L"GetZip", gcnew cli::array< System::Object^  >(2) {city, state}, callback, asyncState);
    }
    
    inline System::Int32 FindZipCodeClass::EndGetZip(System::IAsyncResult^  asyncResult) {
        cli::array< System::Object^  >^  results = this->EndInvoke(asyncResult);
        return (*cli::safe_cast<System::Int32^>(results[0]));
    }
    
    inline System::Void FindZipCodeClass::GetZipAsync(System::String^  city, System::String^  state) {
        this->GetZipAsync(city, state, nullptr);
    }
    
    inline System::Void FindZipCodeClass::GetZipAsync(System::String^  city, System::String^  state, System::Object^  userState) {
        if (this->GetZipOperationCompleted == nullptr) {
            this->GetZipOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &FindZipCode::FindZipCodeClass::OnGetZipOperationCompleted);
        }
        this->InvokeAsync(L"GetZip", gcnew cli::array< System::Object^  >(2) {city, state}, this->GetZipOperationCompleted, userState);
    }
    
    inline System::Void FindZipCodeClass::OnGetZipOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->GetZipCompleted(this, (gcnew FindZipCode::GetZipCompletedEventArgs(invokeArgs->Results, invokeArgs->Error, 
                    invokeArgs->Cancelled, invokeArgs->UserState)));
        }
    }
    
    inline System::Void FindZipCodeClass::CancelAsync(System::Object^  userState) {
        __super::CancelAsync(userState);
    }
    
    
    inline GetZipCompletedEventArgs::GetZipCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                System::Boolean cancelled, System::Object^  userState) : 
            System::ComponentModel::AsyncCompletedEventArgs(exception, cancelled, userState) {
        this->results = results;
    }
    
    inline System::Int32 GetZipCompletedEventArgs::Result::get() {
        this->RaiseExceptionIfNecessary();
        return (*cli::safe_cast<System::Int32^>(this->results[0]));
    }
}
