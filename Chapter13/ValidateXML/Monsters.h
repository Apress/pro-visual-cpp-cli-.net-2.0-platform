#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50630.0.
// 
namespace ValidateXML {
    using namespace System;
    
    using namespace System;
    ref class MonsterList;
    
    
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"MonsterList"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet"), 
    System::CLSCompliantAttribute(false)]
    public ref class MonsterList : public System::Data::DataSet {
        public : ref class MonsterDataTable;
        public : ref class HitDiceDataTable;
        public : ref class WeaponDataTable;
        public : ref class MonsterRow;
        public : ref class HitDiceRow;
        public : ref class WeaponRow;
        public : ref class MonsterRowChangeEvent;
        public : ref class HitDiceRowChangeEvent;
        public : ref class WeaponRowChangeEvent;
        
        private: ValidateXML::MonsterList::MonsterDataTable^  tableMonster;
        
        private: ValidateXML::MonsterList::HitDiceDataTable^  tableHitDice;
        
        private: ValidateXML::MonsterList::WeaponDataTable^  tableWeapon;
        
        private: System::Data::DataRelation^  relationMonster_HitDice;
        
        private: System::Data::DataRelation^  relationMonster_Weapon;
        
        private: System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void MonsterRowChangeEventHandler(System::Object^  sender, ValidateXML::MonsterList::MonsterRowChangeEvent^  e);
        
        public : delegate System::Void HitDiceRowChangeEventHandler(System::Object^  sender, ValidateXML::MonsterList::HitDiceRowChangeEvent^  e);
        
        public : delegate System::Void WeaponRowChangeEventHandler(System::Object^  sender, ValidateXML::MonsterList::WeaponRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MonsterList();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MonsterList(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(System::ComponentModel::DesignerSerializationVisibility::Content)]
         property ValidateXML::MonsterList::MonsterDataTable^  Monster {
            ValidateXML::MonsterList::MonsterDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(System::ComponentModel::DesignerSerializationVisibility::Content)]
         property ValidateXML::MonsterList::HitDiceDataTable^  HitDice {
            ValidateXML::MonsterList::HitDiceDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(System::ComponentModel::DesignerSerializationVisibility::Content)]
         property ValidateXML::MonsterList::WeaponDataTable^  Weapon {
            ValidateXML::MonsterList::WeaponDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual  property System::Data::SchemaSerializationMode SchemaSerializationMode {
            System::Data::SchemaSerializationMode get() override;
            System::Void set(System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
         property System::Data::DataTableCollection^  Tables {
            System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Hidden)]
         property System::Data::DataRelationCollection^  Relations {
            System::Data::DataRelationCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DefaultValueAttribute(true)]
         property System::Boolean EnforceConstraints {
            System::Boolean get() new;
            System::Void set(System::Boolean value) new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Void ReadXmlSerializable(System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitVars(System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Boolean ShouldSerializeMonster();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Boolean ShouldSerializeHitDice();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Boolean ShouldSerializeWeapon();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        System::Void SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class MonsterDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn^  columnName;
            
            private: System::Data::DataColumn^  columnMonster_Id;
            
            public: event ValidateXML::MonsterList::MonsterRowChangeEventHandler^  MonsterRowChanging;
            
            public: event ValidateXML::MonsterList::MonsterRowChangeEventHandler^  MonsterRowChanged;
            
            public: event ValidateXML::MonsterList::MonsterRowChangeEventHandler^  MonsterRowDeleting;
            
            public: event ValidateXML::MonsterList::MonsterRowChangeEventHandler^  MonsterRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MonsterDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MonsterDataTable(System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MonsterDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  NameColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  Monster_IdColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
             property System::Int32 Count {
                System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::MonsterRow^  default [System::Int32 ] {
                ValidateXML::MonsterList::MonsterRow^  get(System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void AddMonsterRow(ValidateXML::MonsterList::MonsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::MonsterRow^  AddMonsterRow(System::String^  Name);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::MonsterRow^  NewMonsterRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataRow^  NewRowFromBuilder(System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void RemoveMonsterRow(ValidateXML::MonsterList::MonsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class HitDiceDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn^  columnDice;
            
            private: System::Data::DataColumn^  columnDefault;
            
            private: System::Data::DataColumn^  columnMonster_Id;
            
            public: event ValidateXML::MonsterList::HitDiceRowChangeEventHandler^  HitDiceRowChanging;
            
            public: event ValidateXML::MonsterList::HitDiceRowChangeEventHandler^  HitDiceRowChanged;
            
            public: event ValidateXML::MonsterList::HitDiceRowChangeEventHandler^  HitDiceRowDeleting;
            
            public: event ValidateXML::MonsterList::HitDiceRowChangeEventHandler^  HitDiceRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HitDiceDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HitDiceDataTable(System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HitDiceDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  DiceColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  DefaultColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  Monster_IdColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
             property System::Int32 Count {
                System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::HitDiceRow^  default [System::Int32 ] {
                ValidateXML::MonsterList::HitDiceRow^  get(System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void AddHitDiceRow(ValidateXML::MonsterList::HitDiceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::HitDiceRow^  AddHitDiceRow(System::String^  Dice, System::Byte Default, ValidateXML::MonsterList::MonsterRow^  parentMonsterRowByMonster_HitDice);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::HitDiceRow^  NewHitDiceRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataRow^  NewRowFromBuilder(System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void RemoveHitDiceRow(ValidateXML::MonsterList::HitDiceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WeaponDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn^  columnNumber;
            
            private: System::Data::DataColumn^  columnDamage;
            
            private: System::Data::DataColumn^  columnWeapon_text;
            
            private: System::Data::DataColumn^  columnMonster_Id;
            
            public: event ValidateXML::MonsterList::WeaponRowChangeEventHandler^  WeaponRowChanging;
            
            public: event ValidateXML::MonsterList::WeaponRowChangeEventHandler^  WeaponRowChanged;
            
            public: event ValidateXML::MonsterList::WeaponRowChangeEventHandler^  WeaponRowDeleting;
            
            public: event ValidateXML::MonsterList::WeaponRowChangeEventHandler^  WeaponRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WeaponDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WeaponDataTable(System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WeaponDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  NumberColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  DamageColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  Weapon_textColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataColumn^  Monster_IdColumn {
                System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
             property System::Int32 Count {
                System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::WeaponRow^  default [System::Int32 ] {
                ValidateXML::MonsterList::WeaponRow^  get(System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void AddWeaponRow(ValidateXML::MonsterList::WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::WeaponRow^  AddWeaponRow(System::Byte Number, System::String^  Damage, System::String^  Weapon_text, 
                        ValidateXML::MonsterList::MonsterRow^  parentMonsterRowByMonster_Weapon);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ValidateXML::MonsterList::WeaponRow^  NewWeaponRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Data::DataRow^  NewRowFromBuilder(System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void RemoveWeaponRow(ValidateXML::MonsterList::WeaponRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MonsterRow : public System::Data::DataRow {
            
            private: ValidateXML::MonsterList::MonsterDataTable^  tableMonster;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MonsterRow(System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  Name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Int32 Monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ValidateXML::MonsterList::HitDiceRow^  >^  GetHitDiceRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ValidateXML::MonsterList::WeaponRow^  >^  GetWeaponRows();
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class HitDiceRow : public System::Data::DataRow {
            
            private: ValidateXML::MonsterList::HitDiceDataTable^  tableHitDice;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HitDiceRow(System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  Dice {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Byte Default {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Int32 Monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::MonsterRow^  MonsterRow {
                ValidateXML::MonsterList::MonsterRow^  get();
                System::Void set(ValidateXML::MonsterList::MonsterRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsMonster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetMonster_IdNull();
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class WeaponRow : public System::Data::DataRow {
            
            private: ValidateXML::MonsterList::WeaponDataTable^  tableWeapon;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WeaponRow(System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Byte Number {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  Damage {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::String^  Weapon_text {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Int32 Monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::MonsterRow^  MonsterRow {
                ValidateXML::MonsterList::MonsterRow^  get();
                System::Void set(ValidateXML::MonsterList::MonsterRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Boolean IsMonster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            System::Void SetMonster_IdNull();
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MonsterRowChangeEvent : public System::EventArgs {
            
            private: ValidateXML::MonsterList::MonsterRow^  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MonsterRowChangeEvent(ValidateXML::MonsterList::MonsterRow^  row, System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::MonsterRow^  Row {
                ValidateXML::MonsterList::MonsterRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataRowAction Action {
                System::Data::DataRowAction get();
            }
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class HitDiceRowChangeEvent : public System::EventArgs {
            
            private: ValidateXML::MonsterList::HitDiceRow^  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HitDiceRowChangeEvent(ValidateXML::MonsterList::HitDiceRow^  row, System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::HitDiceRow^  Row {
                ValidateXML::MonsterList::HitDiceRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataRowAction Action {
                System::Data::DataRowAction get();
            }
        };
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class WeaponRowChangeEvent : public System::EventArgs {
            
            private: ValidateXML::MonsterList::WeaponRow^  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            WeaponRowChangeEvent(ValidateXML::MonsterList::WeaponRow^  row, System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property ValidateXML::MonsterList::WeaponRow^  Row {
                ValidateXML::MonsterList::WeaponRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
             property System::Data::DataRowAction Action {
                System::Data::DataRowAction get();
            }
        };
    };
}
namespace ValidateXML {
    
    
    inline MonsterList::MonsterList() {
        this->BeginInit();
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &ValidateXML::MonsterList::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline MonsterList::MonsterList(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataSet(info, context) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &ValidateXML::MonsterList::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        System::String^  strSchema = (cli::safe_cast<System::String^  >(info->GetValue(L"XmlSchema", System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == System::Data::SchemaSerializationMode::IncludeSchema) {
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->EnforceConstraints = false;
            ds->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Monster"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::MonsterDataTable(ds->Tables[L"Monster"])));
            }
            if (ds->Tables[L"HitDice"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::HitDiceDataTable(ds->Tables[L"HitDice"])));
            }
            if (ds->Tables[L"Weapon"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::WeaponDataTable(ds->Tables[L"Weapon"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew System::Xml::XmlTextReader((gcnew System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew System::ComponentModel::CollectionChangeEventHandler(this, &ValidateXML::MonsterList::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline ValidateXML::MonsterList::MonsterDataTable^  MonsterList::Monster::get() {
        return this->tableMonster;
    }
    
    inline ValidateXML::MonsterList::HitDiceDataTable^  MonsterList::HitDice::get() {
        return this->tableHitDice;
    }
    
    inline ValidateXML::MonsterList::WeaponDataTable^  MonsterList::Weapon::get() {
        return this->tableWeapon;
    }
    
    inline System::Data::SchemaSerializationMode MonsterList::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void MonsterList::SchemaSerializationMode::set(System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline System::Data::DataTableCollection^  MonsterList::Tables::get() {
        return __super::Tables;
    }
    
    inline System::Data::DataRelationCollection^  MonsterList::Relations::get() {
        return __super::Relations;
    }
    
    inline System::Boolean MonsterList::EnforceConstraints::get() {
        return __super::EnforceConstraints;
    }
    inline System::Void MonsterList::EnforceConstraints::set(System::Boolean value) {
        __super::EnforceConstraints = __identifier(value);
    }
    
    inline System::Void MonsterList::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline System::Data::DataSet^  MonsterList::Clone() {
        ValidateXML::MonsterList^  cln = (cli::safe_cast<ValidateXML::MonsterList^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Boolean MonsterList::ShouldSerializeTables() {
        return false;
    }
    
    inline System::Boolean MonsterList::ShouldSerializeRelations() {
        return false;
    }
    
    inline System::Void MonsterList::ReadXmlSerializable(System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            System::Data::DataSet^  ds = (gcnew System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Monster"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::MonsterDataTable(ds->Tables[L"Monster"])));
            }
            if (ds->Tables[L"HitDice"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::HitDiceDataTable(ds->Tables[L"HitDice"])));
            }
            if (ds->Tables[L"Weapon"] != nullptr) {
                __super::Tables->Add((gcnew ValidateXML::MonsterList::WeaponDataTable(ds->Tables[L"Weapon"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchema^  MonsterList::GetSchemaSerializable() {
        System::IO::MemoryStream^  stream = (gcnew System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read((gcnew System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline System::Void MonsterList::InitVars() {
        this->InitVars(true);
    }
    
    inline System::Void MonsterList::InitVars(System::Boolean initTable) {
        this->tableMonster = (cli::safe_cast<ValidateXML::MonsterList::MonsterDataTable^  >(__super::Tables[L"Monster"]));
        if (initTable == true) {
            if (this->tableMonster != nullptr) {
                this->tableMonster->InitVars();
            }
        }
        this->tableHitDice = (cli::safe_cast<ValidateXML::MonsterList::HitDiceDataTable^  >(__super::Tables[L"HitDice"]));
        if (initTable == true) {
            if (this->tableHitDice != nullptr) {
                this->tableHitDice->InitVars();
            }
        }
        this->tableWeapon = (cli::safe_cast<ValidateXML::MonsterList::WeaponDataTable^  >(__super::Tables[L"Weapon"]));
        if (initTable == true) {
            if (this->tableWeapon != nullptr) {
                this->tableWeapon->InitVars();
            }
        }
        this->relationMonster_HitDice = this->Relations[L"Monster_HitDice"];
        this->relationMonster_Weapon = this->Relations[L"Monster_Weapon"];
    }
    
    inline System::Void MonsterList::InitClass() {
        this->DataSetName = L"MonsterList";
        this->Prefix = L"";
        this->EnforceConstraints = true;
        this->tableMonster = (gcnew ValidateXML::MonsterList::MonsterDataTable());
        __super::Tables->Add(this->tableMonster);
        this->tableHitDice = (gcnew ValidateXML::MonsterList::HitDiceDataTable());
        __super::Tables->Add(this->tableHitDice);
        this->tableWeapon = (gcnew ValidateXML::MonsterList::WeaponDataTable());
        __super::Tables->Add(this->tableWeapon);
        System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew System::Data::ForeignKeyConstraint(L"Monster_HitDice", gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableMonster->Monster_IdColumn}, 
            gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableHitDice->Monster_IdColumn}));
        this->tableHitDice->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        fkc = (gcnew System::Data::ForeignKeyConstraint(L"Monster_Weapon", gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableMonster->Monster_IdColumn}, 
            gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableWeapon->Monster_IdColumn}));
        this->tableWeapon->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        this->relationMonster_HitDice = (gcnew System::Data::DataRelation(L"Monster_HitDice", gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableMonster->Monster_IdColumn}, 
            gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableHitDice->Monster_IdColumn}, false));
        this->relationMonster_HitDice->Nested = true;
        this->Relations->Add(this->relationMonster_HitDice);
        this->relationMonster_Weapon = (gcnew System::Data::DataRelation(L"Monster_Weapon", gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableMonster->Monster_IdColumn}, 
            gcnew cli::array< System::Data::DataColumn^  >(1) {this->tableWeapon->Monster_IdColumn}, false));
        this->relationMonster_Weapon->Nested = true;
        this->Relations->Add(this->relationMonster_Weapon);
    }
    
    inline System::Boolean MonsterList::ShouldSerializeMonster() {
        return false;
    }
    
    inline System::Boolean MonsterList::ShouldSerializeHitDice() {
        return false;
    }
    
    inline System::Boolean MonsterList::ShouldSerializeWeapon() {
        return false;
    }
    
    inline System::Void MonsterList::SchemaChanged(System::Object^  sender, System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  MonsterList::GetTypedDataSetSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        ValidateXML::MonsterList^  ds = (gcnew ValidateXML::MonsterList());
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any = (gcnew System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        return type;
    }
    
    
    inline MonsterList::MonsterDataTable::MonsterDataTable() {
        this->TableName = L"Monster";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline MonsterList::MonsterDataTable::MonsterDataTable(System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline MonsterList::MonsterDataTable::MonsterDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline System::Data::DataColumn^  MonsterList::MonsterDataTable::NameColumn::get() {
        return this->columnName;
    }
    
    inline System::Data::DataColumn^  MonsterList::MonsterDataTable::Monster_IdColumn::get() {
        return this->columnMonster_Id;
    }
    
    inline System::Int32 MonsterList::MonsterDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::MonsterDataTable::default::get(System::Int32 index) {
        return (cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(this->Rows[index]));
    }
    
    inline System::Void MonsterList::MonsterDataTable::AddMonsterRow(ValidateXML::MonsterList::MonsterRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::MonsterDataTable::AddMonsterRow(System::String^  Name) {
        ValidateXML::MonsterList::MonsterRow^  rowMonsterRow = (cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(this->NewRow()));
        rowMonsterRow->ItemArray = gcnew cli::array< System::Object^  >(2) {Name, nullptr};
        this->Rows->Add(rowMonsterRow);
        return rowMonsterRow;
    }
    
    inline System::Collections::IEnumerator^  MonsterList::MonsterDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline System::Data::DataTable^  MonsterList::MonsterDataTable::Clone() {
        ValidateXML::MonsterList::MonsterDataTable^  cln = (cli::safe_cast<ValidateXML::MonsterList::MonsterDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Data::DataTable^  MonsterList::MonsterDataTable::CreateInstance() {
        return (gcnew ValidateXML::MonsterList::MonsterDataTable());
    }
    
    inline System::Void MonsterList::MonsterDataTable::InitVars() {
        this->columnName = __super::Columns[L"Name"];
        this->columnMonster_Id = __super::Columns[L"Monster_Id"];
    }
    
    inline System::Void MonsterList::MonsterDataTable::InitClass() {
        this->columnName = (gcnew System::Data::DataColumn(L"Name", System::String::typeid, nullptr, System::Data::MappingType::Element));
        __super::Columns->Add(this->columnName);
        this->columnMonster_Id = (gcnew System::Data::DataColumn(L"Monster_Id", System::Int32::typeid, nullptr, System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnMonster_Id);
        this->Constraints->Add((gcnew System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< System::Data::DataColumn^  >(1) {this->columnMonster_Id}, 
                true)));
        this->columnName->AllowDBNull = false;
        this->columnMonster_Id->AutoIncrement = true;
        this->columnMonster_Id->AllowDBNull = false;
        this->columnMonster_Id->Unique = true;
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::MonsterDataTable::NewMonsterRow() {
        return (cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(this->NewRow()));
    }
    
    inline System::Data::DataRow^  MonsterList::MonsterDataTable::NewRowFromBuilder(System::Data::DataRowBuilder^  builder) {
        return (gcnew ValidateXML::MonsterList::MonsterRow(builder));
    }
    
    inline System::Type^  MonsterList::MonsterDataTable::GetRowType() {
        return ValidateXML::MonsterList::MonsterRow::typeid;
    }
    
    inline System::Void MonsterList::MonsterDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->MonsterRowChanged(this, (gcnew ValidateXML::MonsterList::MonsterRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::MonsterDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->MonsterRowChanging(this, (gcnew ValidateXML::MonsterList::MonsterRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::MonsterDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->MonsterRowDeleted(this, (gcnew ValidateXML::MonsterList::MonsterRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::MonsterDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->MonsterRowDeleting(this, (gcnew ValidateXML::MonsterList::MonsterRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::MonsterDataTable::RemoveMonsterRow(ValidateXML::MonsterList::MonsterRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  MonsterList::MonsterDataTable::GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        ValidateXML::MonsterList^  ds = (gcnew ValidateXML::MonsterList());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = System::Decimal(0);
        any1->MaxOccurs = System::Decimal::MaxValue;
        any1->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = System::Decimal(1);
        any2->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"MonsterDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        return type;
    }
    
    
    inline MonsterList::HitDiceDataTable::HitDiceDataTable() {
        this->TableName = L"HitDice";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline MonsterList::HitDiceDataTable::HitDiceDataTable(System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline MonsterList::HitDiceDataTable::HitDiceDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline System::Data::DataColumn^  MonsterList::HitDiceDataTable::DiceColumn::get() {
        return this->columnDice;
    }
    
    inline System::Data::DataColumn^  MonsterList::HitDiceDataTable::DefaultColumn::get() {
        return this->columnDefault;
    }
    
    inline System::Data::DataColumn^  MonsterList::HitDiceDataTable::Monster_IdColumn::get() {
        return this->columnMonster_Id;
    }
    
    inline System::Int32 MonsterList::HitDiceDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ValidateXML::MonsterList::HitDiceRow^  MonsterList::HitDiceDataTable::default::get(System::Int32 index) {
        return (cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(this->Rows[index]));
    }
    
    inline System::Void MonsterList::HitDiceDataTable::AddHitDiceRow(ValidateXML::MonsterList::HitDiceRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ValidateXML::MonsterList::HitDiceRow^  MonsterList::HitDiceDataTable::AddHitDiceRow(System::String^  Dice, System::Byte Default, 
                ValidateXML::MonsterList::MonsterRow^  parentMonsterRowByMonster_HitDice) {
        ValidateXML::MonsterList::HitDiceRow^  rowHitDiceRow = (cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(this->NewRow()));
        rowHitDiceRow->ItemArray = gcnew cli::array< System::Object^  >(3) {Dice, Default, parentMonsterRowByMonster_HitDice[1]};
        this->Rows->Add(rowHitDiceRow);
        return rowHitDiceRow;
    }
    
    inline System::Collections::IEnumerator^  MonsterList::HitDiceDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline System::Data::DataTable^  MonsterList::HitDiceDataTable::Clone() {
        ValidateXML::MonsterList::HitDiceDataTable^  cln = (cli::safe_cast<ValidateXML::MonsterList::HitDiceDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Data::DataTable^  MonsterList::HitDiceDataTable::CreateInstance() {
        return (gcnew ValidateXML::MonsterList::HitDiceDataTable());
    }
    
    inline System::Void MonsterList::HitDiceDataTable::InitVars() {
        this->columnDice = __super::Columns[L"Dice"];
        this->columnDefault = __super::Columns[L"Default"];
        this->columnMonster_Id = __super::Columns[L"Monster_Id"];
    }
    
    inline System::Void MonsterList::HitDiceDataTable::InitClass() {
        this->columnDice = (gcnew System::Data::DataColumn(L"Dice", System::String::typeid, nullptr, System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDice);
        this->columnDefault = (gcnew System::Data::DataColumn(L"Default", System::Byte::typeid, nullptr, System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDefault);
        this->columnMonster_Id = (gcnew System::Data::DataColumn(L"Monster_Id", System::Int32::typeid, nullptr, System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnMonster_Id);
        this->columnDice->AllowDBNull = false;
        this->columnDice->Namespace = L"";
        this->columnDefault->AllowDBNull = false;
        this->columnDefault->Namespace = L"";
    }
    
    inline ValidateXML::MonsterList::HitDiceRow^  MonsterList::HitDiceDataTable::NewHitDiceRow() {
        return (cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(this->NewRow()));
    }
    
    inline System::Data::DataRow^  MonsterList::HitDiceDataTable::NewRowFromBuilder(System::Data::DataRowBuilder^  builder) {
        return (gcnew ValidateXML::MonsterList::HitDiceRow(builder));
    }
    
    inline System::Type^  MonsterList::HitDiceDataTable::GetRowType() {
        return ValidateXML::MonsterList::HitDiceRow::typeid;
    }
    
    inline System::Void MonsterList::HitDiceDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->HitDiceRowChanged(this, (gcnew ValidateXML::MonsterList::HitDiceRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::HitDiceDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->HitDiceRowChanging(this, (gcnew ValidateXML::MonsterList::HitDiceRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::HitDiceDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->HitDiceRowDeleted(this, (gcnew ValidateXML::MonsterList::HitDiceRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::HitDiceDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->HitDiceRowDeleting(this, (gcnew ValidateXML::MonsterList::HitDiceRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::HitDiceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::HitDiceDataTable::RemoveHitDiceRow(ValidateXML::MonsterList::HitDiceRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  MonsterList::HitDiceDataTable::GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        ValidateXML::MonsterList^  ds = (gcnew ValidateXML::MonsterList());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = System::Decimal(0);
        any1->MaxOccurs = System::Decimal::MaxValue;
        any1->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = System::Decimal(1);
        any2->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"HitDiceDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        return type;
    }
    
    
    inline MonsterList::WeaponDataTable::WeaponDataTable() {
        this->TableName = L"Weapon";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline MonsterList::WeaponDataTable::WeaponDataTable(System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline MonsterList::WeaponDataTable::WeaponDataTable(System::Runtime::Serialization::SerializationInfo^  info, System::Runtime::Serialization::StreamingContext context) : 
            System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline System::Data::DataColumn^  MonsterList::WeaponDataTable::NumberColumn::get() {
        return this->columnNumber;
    }
    
    inline System::Data::DataColumn^  MonsterList::WeaponDataTable::DamageColumn::get() {
        return this->columnDamage;
    }
    
    inline System::Data::DataColumn^  MonsterList::WeaponDataTable::Weapon_textColumn::get() {
        return this->columnWeapon_text;
    }
    
    inline System::Data::DataColumn^  MonsterList::WeaponDataTable::Monster_IdColumn::get() {
        return this->columnMonster_Id;
    }
    
    inline System::Int32 MonsterList::WeaponDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ValidateXML::MonsterList::WeaponRow^  MonsterList::WeaponDataTable::default::get(System::Int32 index) {
        return (cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(this->Rows[index]));
    }
    
    inline System::Void MonsterList::WeaponDataTable::AddWeaponRow(ValidateXML::MonsterList::WeaponRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ValidateXML::MonsterList::WeaponRow^  MonsterList::WeaponDataTable::AddWeaponRow(System::Byte Number, System::String^  Damage, 
                System::String^  Weapon_text, ValidateXML::MonsterList::MonsterRow^  parentMonsterRowByMonster_Weapon) {
        ValidateXML::MonsterList::WeaponRow^  rowWeaponRow = (cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(this->NewRow()));
        rowWeaponRow->ItemArray = gcnew cli::array< System::Object^  >(4) {Number, Damage, Weapon_text, parentMonsterRowByMonster_Weapon[1]};
        this->Rows->Add(rowWeaponRow);
        return rowWeaponRow;
    }
    
    inline System::Collections::IEnumerator^  MonsterList::WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline System::Data::DataTable^  MonsterList::WeaponDataTable::Clone() {
        ValidateXML::MonsterList::WeaponDataTable^  cln = (cli::safe_cast<ValidateXML::MonsterList::WeaponDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline System::Data::DataTable^  MonsterList::WeaponDataTable::CreateInstance() {
        return (gcnew ValidateXML::MonsterList::WeaponDataTable());
    }
    
    inline System::Void MonsterList::WeaponDataTable::InitVars() {
        this->columnNumber = __super::Columns[L"Number"];
        this->columnDamage = __super::Columns[L"Damage"];
        this->columnWeapon_text = __super::Columns[L"Weapon_text"];
        this->columnMonster_Id = __super::Columns[L"Monster_Id"];
    }
    
    inline System::Void MonsterList::WeaponDataTable::InitClass() {
        this->columnNumber = (gcnew System::Data::DataColumn(L"Number", System::Byte::typeid, nullptr, System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnNumber);
        this->columnDamage = (gcnew System::Data::DataColumn(L"Damage", System::String::typeid, nullptr, System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDamage);
        this->columnWeapon_text = (gcnew System::Data::DataColumn(L"Weapon_text", System::String::typeid, nullptr, System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columnWeapon_text);
        this->columnMonster_Id = (gcnew System::Data::DataColumn(L"Monster_Id", System::Int32::typeid, nullptr, System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnMonster_Id);
        this->columnNumber->AllowDBNull = false;
        this->columnNumber->Namespace = L"";
        this->columnDamage->AllowDBNull = false;
        this->columnDamage->Namespace = L"";
        this->columnWeapon_text->AllowDBNull = false;
    }
    
    inline ValidateXML::MonsterList::WeaponRow^  MonsterList::WeaponDataTable::NewWeaponRow() {
        return (cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(this->NewRow()));
    }
    
    inline System::Data::DataRow^  MonsterList::WeaponDataTable::NewRowFromBuilder(System::Data::DataRowBuilder^  builder) {
        return (gcnew ValidateXML::MonsterList::WeaponRow(builder));
    }
    
    inline System::Type^  MonsterList::WeaponDataTable::GetRowType() {
        return ValidateXML::MonsterList::WeaponRow::typeid;
    }
    
    inline System::Void MonsterList::WeaponDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WeaponRowChanged(this, (gcnew ValidateXML::MonsterList::WeaponRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::WeaponDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WeaponRowChanging(this, (gcnew ValidateXML::MonsterList::WeaponRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::WeaponDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WeaponRowDeleted(this, (gcnew ValidateXML::MonsterList::WeaponRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::WeaponDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WeaponRowDeleting(this, (gcnew ValidateXML::MonsterList::WeaponRowChangeEvent((cli::safe_cast<ValidateXML::MonsterList::WeaponRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline System::Void MonsterList::WeaponDataTable::RemoveWeaponRow(ValidateXML::MonsterList::WeaponRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline System::Xml::Schema::XmlSchemaComplexType^  MonsterList::WeaponDataTable::GetTypedTableSchema(System::Xml::Schema::XmlSchemaSet^  xs) {
        System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew System::Xml::Schema::XmlSchemaComplexType());
        System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew System::Xml::Schema::XmlSchemaSequence());
        ValidateXML::MonsterList^  ds = (gcnew ValidateXML::MonsterList());
        xs->Add(ds->GetSchemaSerializable());
        System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = System::Decimal(0);
        any1->MaxOccurs = System::Decimal::MaxValue;
        any1->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = System::Decimal(1);
        any2->ProcessContents = System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WeaponDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        return type;
    }
    
    
    inline MonsterList::MonsterRow::MonsterRow(System::Data::DataRowBuilder^  rb) : 
            System::Data::DataRow(rb) {
        this->tableMonster = (cli::safe_cast<ValidateXML::MonsterList::MonsterDataTable^  >(this->Table));
    }
    
    inline System::String^  MonsterList::MonsterRow::Name::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableMonster->NameColumn]));
    }
    inline System::Void MonsterList::MonsterRow::Name::set(System::String^  value) {
        this[this->tableMonster->NameColumn] = value;
    }
    
    inline System::Int32 MonsterList::MonsterRow::Monster_Id::get() {
        return (*cli::safe_cast<System::Int32^>(this[this->tableMonster->Monster_IdColumn]));
    }
    inline System::Void MonsterList::MonsterRow::Monster_Id::set(System::Int32 value) {
        this[this->tableMonster->Monster_IdColumn] = value;
    }
    
    inline cli::array< ValidateXML::MonsterList::HitDiceRow^  >^  MonsterList::MonsterRow::GetHitDiceRows() {
        return (cli::safe_cast<cli::array< ValidateXML::MonsterList::HitDiceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Monster_HitDice"])));
    }
    
    inline cli::array< ValidateXML::MonsterList::WeaponRow^  >^  MonsterList::MonsterRow::GetWeaponRows() {
        return (cli::safe_cast<cli::array< ValidateXML::MonsterList::WeaponRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Monster_Weapon"])));
    }
    
    
    inline MonsterList::HitDiceRow::HitDiceRow(System::Data::DataRowBuilder^  rb) : 
            System::Data::DataRow(rb) {
        this->tableHitDice = (cli::safe_cast<ValidateXML::MonsterList::HitDiceDataTable^  >(this->Table));
    }
    
    inline System::String^  MonsterList::HitDiceRow::Dice::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableHitDice->DiceColumn]));
    }
    inline System::Void MonsterList::HitDiceRow::Dice::set(System::String^  value) {
        this[this->tableHitDice->DiceColumn] = value;
    }
    
    inline System::Byte MonsterList::HitDiceRow::Default::get() {
        return (*cli::safe_cast<System::Byte^>(this[this->tableHitDice->DefaultColumn]));
    }
    inline System::Void MonsterList::HitDiceRow::Default::set(System::Byte value) {
        this[this->tableHitDice->DefaultColumn] = value;
    }
    
    inline System::Int32 MonsterList::HitDiceRow::Monster_Id::get() {
        try {
            return (*cli::safe_cast<System::Int32^>(this[this->tableHitDice->Monster_IdColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'Monster_Id\' in table \'HitDice\' is DBNull.", 
                e));
        }
    }
    inline System::Void MonsterList::HitDiceRow::Monster_Id::set(System::Int32 value) {
        this[this->tableHitDice->Monster_IdColumn] = value;
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::HitDiceRow::MonsterRow::get() {
        return (cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Monster_HitDice"])));
    }
    inline System::Void MonsterList::HitDiceRow::MonsterRow::set(ValidateXML::MonsterList::MonsterRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Monster_HitDice"]);
    }
    
    inline System::Boolean MonsterList::HitDiceRow::IsMonster_IdNull() {
        return this->IsNull(this->tableHitDice->Monster_IdColumn);
    }
    
    inline System::Void MonsterList::HitDiceRow::SetMonster_IdNull() {
        this[this->tableHitDice->Monster_IdColumn] = System::Convert::DBNull;
    }
    
    
    inline MonsterList::WeaponRow::WeaponRow(System::Data::DataRowBuilder^  rb) : 
            System::Data::DataRow(rb) {
        this->tableWeapon = (cli::safe_cast<ValidateXML::MonsterList::WeaponDataTable^  >(this->Table));
    }
    
    inline System::Byte MonsterList::WeaponRow::Number::get() {
        return (*cli::safe_cast<System::Byte^>(this[this->tableWeapon->NumberColumn]));
    }
    inline System::Void MonsterList::WeaponRow::Number::set(System::Byte value) {
        this[this->tableWeapon->NumberColumn] = value;
    }
    
    inline System::String^  MonsterList::WeaponRow::Damage::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableWeapon->DamageColumn]));
    }
    inline System::Void MonsterList::WeaponRow::Damage::set(System::String^  value) {
        this[this->tableWeapon->DamageColumn] = value;
    }
    
    inline System::String^  MonsterList::WeaponRow::Weapon_text::get() {
        return (cli::safe_cast<System::String^  >(this[this->tableWeapon->Weapon_textColumn]));
    }
    inline System::Void MonsterList::WeaponRow::Weapon_text::set(System::String^  value) {
        this[this->tableWeapon->Weapon_textColumn] = value;
    }
    
    inline System::Int32 MonsterList::WeaponRow::Monster_Id::get() {
        try {
            return (*cli::safe_cast<System::Int32^>(this[this->tableWeapon->Monster_IdColumn]));
        }
        catch (System::InvalidCastException^ e) {
            throw (gcnew System::Data::StrongTypingException(L"The value for column \'Monster_Id\' in table \'Weapon\' is DBNull.", 
                e));
        }
    }
    inline System::Void MonsterList::WeaponRow::Monster_Id::set(System::Int32 value) {
        this[this->tableWeapon->Monster_IdColumn] = value;
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::WeaponRow::MonsterRow::get() {
        return (cli::safe_cast<ValidateXML::MonsterList::MonsterRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Monster_Weapon"])));
    }
    inline System::Void MonsterList::WeaponRow::MonsterRow::set(ValidateXML::MonsterList::MonsterRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Monster_Weapon"]);
    }
    
    inline System::Boolean MonsterList::WeaponRow::IsMonster_IdNull() {
        return this->IsNull(this->tableWeapon->Monster_IdColumn);
    }
    
    inline System::Void MonsterList::WeaponRow::SetMonster_IdNull() {
        this[this->tableWeapon->Monster_IdColumn] = System::Convert::DBNull;
    }
    
    
    inline MonsterList::MonsterRowChangeEvent::MonsterRowChangeEvent(ValidateXML::MonsterList::MonsterRow^  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ValidateXML::MonsterList::MonsterRow^  MonsterList::MonsterRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction MonsterList::MonsterRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline MonsterList::HitDiceRowChangeEvent::HitDiceRowChangeEvent(ValidateXML::MonsterList::HitDiceRow^  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ValidateXML::MonsterList::HitDiceRow^  MonsterList::HitDiceRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction MonsterList::HitDiceRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline MonsterList::WeaponRowChangeEvent::WeaponRowChangeEvent(ValidateXML::MonsterList::WeaponRow^  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ValidateXML::MonsterList::WeaponRow^  MonsterList::WeaponRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction MonsterList::WeaponRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
